#!/bin/bash
# Copyright 2023, Vonahi Security
# All rights reserved.
#
# This script may not be redistributed without express written consent from
# Vonahi Security.
#
# Last Modified: April 04, 2024
# Version 1.15

create_swap_file() {

	# Check for existing swap
	SWAP_EXISTS=$(swapon --show 2>/dev/null | wc -l)

	if [ $SWAP_EXISTS -eq 0 ]; then
		# Get total memory
		MEM_TOTAL=$(grep MemTotal /proc/meminfo | awk '{print $2}')

		# Calculate desired swap size (half of memory)
		SWAP_SIZE=$((MEM_TOTAL / 1024 / 1024 / 2))

		# Create swap file with size in Megabytes (adjust unit if needed)
		if ! fallocate -l ${SWAP_SIZE}M /swapfile &>/dev/null; then
			echo "fallocate failed. Using dd instead."
			dd if=/dev/zero of=/swapfile bs=1M count=$SWAP_SIZE status=progress || {
				echo "Error: Failed to create swap file."
				exit 1
			}
		fi

		# Set permissions
		chmod 600 /swapfile || {
			echo "Error: Failed to set permissions."
			exit 1
		}

		# Format for swap
		mkswap /swapfile || {
			echo "Error: Failed to format swap file."
			exit 1
		}

		# Enable swap
		swapon /swapfile || {
			echo "Error: Failed to enable swap."
			exit 1
		}

		# Add swap file to /etc/fstab
		if ! grep -q "/swapfile" /etc/fstab; then
			echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab || {
				echo "Error: Failed to update /etc/fstab."
				exit 1
			}
		fi

		echo "Swap file created and enabled successfully!"
		echo " "
	else
		echo "Swap already exists. Skipping creation."
		echo " "
	fi
}

# System requirement: minimum of 3.5GB of memory (4GB+ preferred)
if [[ $(free -m | awk '/Mem/ {print $2}') -lt 3500 ]]; then
	echo "Your VM does not have the recommended memory requirements (4GB). Please refer to the Help Center for minimum memory requirements: https://help.vpentest.io/hc/en-us/articles/360059579012"
	exit
fi

# Check for existing swap
SWAP_EXISTS=$(swapon --show 2>/dev/null | wc -l)

echo "A swap partition will be created for better system stability and performance."
echo

# System requirement: minimum of 55GB disk space (80GB+ preferred)
# Get the size and available space of the / volume in GB
size=$(df -k / | awk 'NR==2{print $2/1024/1024}')
available=$(df -k / | awk 'NR==2{print $4/1024/1024}')

if (($(awk -v size="$size" 'BEGIN {print (size > 55)}'))) && (($(awk -v available="$available" 'BEGIN {print (available > 50)}'))); then
	# Continue with the script
	echo "Disk space meets the minimum requirements for vPenTest. Continuing with the install..."
else
	# Exit the script and show an error message
	echo 'Your VM does not have the recommended disk space requirements (80GB / at least 50GB free). Please refer to the Help Center for minimum system requirements: https://help.vpentest.io/hc/en-us/articles/360059579012'
	echo 'Please verify that your "/" mount has 80GB+ allocated.'
	echo 'In some cases, your disk space may be 80GB+, but the amount of disk space allocated to "/"'
	echo 'is less than 80GB. You can use the "df -h" command to confirm this.'
	exit
fi

# Check to make sure the user is logged in as root.
if [[ $EUID -ne 0 ]]; then
	echo
	echo "This script must be run as root. Please refer to the Help Center or installation instructions for additional assistance. (Error code: 0x01)"
	echo "You must be using the root account (not sudo) and located within the /root/ directory."
	exit 1
fi

# Check to make sure the current folder is the root folder
if [[ $PWD != "/root" ]]; then
	echo
	echo "The current directory is not root, and a few things are going to fail because of this."
	echo "Please run this script from the root directory. You can get there with the following command:"
	echo "cd ~"
	exit 1
fi

# Call the function to create swap file
create_swap_file

# Find OS and establish package manager
if uname -a | grep -iq kali; then
	OS="kali"
	PKG_MGR="apt"
	QUIET_MODE="-y"
elif uname -a | grep -iq rasp; then
	OS="rasp"
	PKG_MGR="apt"
	QUIET_MODE="-y"
elif uname -a | grep -iq amzn2; then
	OS="amazon-linux-2"
	PKG_MGR="yum"
	QUIET_MODE="-y"
elif uname -a | grep -iq "ubuntu\|wsl"; then
	OS="ubuntu"
	PKG_MGR="apt"
	QUIET_MODE="-y"
elif cat /etc/os-release | grep -qi rhel; then
	OS="rhel"
	PKG_MGR="yum"
	QUIET_MODE="-y"
else
	echo "This operating system is NOT supported. This script will not continue."
	echo "The supported operating systems are Ubuntu, Amazon Linux 2, and Kali Linux (partially supported)"
	exit
fi

# Determine if aws or on-prem
if uname -a | grep -iq aws || [ "$OS" = "amazon-linux-2" ]; then
	CLOUD=true
else
	CLOUD=false
fi

# Test if OS is Kali.
if [ "$OS" = "kali" ]; then
	echo "Kali Linux is not supported, although this should work. If you prefer to use a supported OS, please refer to the Help Center's installation guide."
	read -p "If you wish to continue, press Enter to continue. Otherwise, press ctrl-c to quit this script." </dev/tty
fi

echo " [*] Please do not cancel this script as it is running in the background."
echo " [*] You will receive a message here once the script has completed installing its prerequisites."
read -p " [*] Press enter to acknowledge and continue..." </dev/tty

# Get the latest scripts
curl -sLk https://app.vpentest.io/345ca6f837851b8fd0b5f9b080fe9cd9006163b1eae1b574d606d4d3c87058ed6391ee3b3e44 -o /root/vpentest_updater.rb
curl -sLk https://app.vpentest.io/440af71236ce69a8f19e3360a56bb803187b236e22d740edaad931f9dbf3b5596b53e1184987 -o /root/vpentest.rb
if [ $? -ne 0 ]; then
	echo "Unable to retrieve the vPenTest Agent updater from https://app.vpentest.io. Please check your internet connection. (Error code: 0x02)"
	exit 1
fi

# Give permission to the updater
chmod +x /root/vpentest_updater.rb /root/vpentest.rb

# Fix for annoying Kali repository issues
if [ "$OS" = "kali" ]; then
	wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add
fi

# Install some prerequisites
$PKG_MGR update $QUIET_MODE
if [ "$OS" = "amazon-linux-2" ]; then
	$PKG_MGR install $QUIET_MODE openssh-server gcc ntpdate libevent-devel ca-certificates nmap net-tools kernel-devel make ncurses-devel openssl-devel unzip

	# Install Ruby2.6.0 via amazon-linux-extras (yum install ruby installs an old version)
	amazon-linux-extras install ruby3.0 -y

	# Amazon Linux 2 comes with an old ass version of Tmux. Need to upgrade.
	# Install libevent (required for Tmux install)
	curl -LOk https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz
	tar -xf libevent-2.1.12-stable.tar.gz
	rm -f libevent-2.1.12-stable.tar.gz
	cd libevent-2.1.12-stable
	./configure --prefix=/usr/local
	make
	make install
	cd ~
	rm -rf libevent-2.1.12-stable

	# Install Tmux 3+ (1.8 comes pre-installed in Amazon Linux 2)
	yum install libevent-devel
	curl -LOk https://github.com/tmux/tmux/releases/download/3.2a/tmux-3.2a.tar.gz
	tar -xf tmux-3.2a.tar.gz
	rm -f tmux-3.2a.tar.gz
	cd tmux-3.2a
	LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib" ./configure --prefix=/usr/local
	make
	make install
	mv tmux /usr/bin
	cd ~
	rm -rf tmux-3.2a

	# Install Neofetch for gathering sysinfo for the vPenTest server.
	wget https://github.com/dylanaraps/neofetch/archive/refs/tags/7.1.0.zip
	unzip -qqo 7.1.0.zip
	rm -f 7.1.0.zip
	cd neofetch-7.1.0
	make install
	cd ~
	rm -rf neofetch-7.1.0
elif [ "$OS" = "kali" ] || [ "$OS" = 'rasp' ] || [ "$OS" = 'ubuntu' ]; then
	$PKG_MGR install $QUIET_MODE openssh-server ntpdate apt-transport-https ca-certificates tmux gnupg-agent software-properties-common nmap net-tools neofetch vim unzip ruby cron
else
	$PKG_MGR install $QUIET_MODE openssh-server chrony ca-certificates tmux nmap net-tools vim unzip ruby
fi

if [ $? -ne 0 ]; then
	echo "An error occurred while trying to install a few packages onto your system. Please verify your internet connection. (Error code: 0x03)"
	exit 1
fi

# Configure Neofetch for sysinfo gathering
if [ ! "$OS" = 'rhel' ]; then
	neofetch
	sed -i"" 's/# info "GPU/info "GPU/g' /root/.config/neofetch/config.conf
	sed -i"" 's/# info "Disk/info "Disk/g' /root/.config/neofetch/config.conf
	sed -i"" 's/# info "Local IP/info "Local IP/g' /root/.config/neofetch/config.conf
	sed -i"" 's/# info "Public IP/info "Public IP/g' /root/.config/neofetch/config.conf
	sed -i"" 's/memory_unit="mib"/memory_unit="gib"/g' /root/.config/neofetch/config.conf
	sed -i"" 's/separator=":"/separator=" =>"/g' /root/.config/neofetch/config.conf
	sed -i"" 's/image_backend="ascii"/image_backend="off"/g' /root/.config/neofetch/config.conf
	sed -i"" 's/stdout="off"/stdout="on"/g' /root/.config/neofetch/config.conf
fi

# Enable SSH on boot
if [ "$CLOUD" != true ]; then
	if [ ! "$OS" = 'rhel' ]; then
		systemctl enable ssh
	else
		systemctl enable sshd
	fi
fi
if [ $? -ne 0 ]; then
	echo "An error occurred while trying to start the SSH service. Please try re-running the script and contact support if you still run into any issues. (Error code: 0x04)"
	exit 1
fi

install_aws_cli_for_arch() {
	# Install AWS
	curl -sO 'https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip'
	unzip -qqo awscli-exe-linux-aarch64.zip
	./aws/install
	rm -rf awscli-exe-linux-aarch64.zip
}

# Install the AWS SSM Agent
if [ "$OS" = "rasp" ]; then
	# ARM 32-bit requires a little bit of a tweak than ARM-64
	if [[ $(arch) = *"aarch64"* ]]; then
		curl https://s3.us-east-2.amazonaws.com/amazon-ssm-us-east-2/latest/debian_arm64/amazon-ssm-agent.deb -s -o /tmp/amazon-ssm-agent.deb
		if [ $? -ne 0 ]; then
			echo "Unable to retrieve the amazon-ssm-agent from AWS. Please check your internet connection. (Error code: 0x05)"
			exit 1
		fi

		$PKG_MGR install awscli $QUIET_MODE
		if [ $? -ne 0 ]; then
			echo "An error occurred while trying to install the AWS CLI. Please reach out to support if you encounter this error message. (Error code: 0x06)"
			exit 1
		fi

		install_aws_cli_for_arch
	else
		curl https://s3.us-east-2.amazonaws.com/amazon-ssm-us-east-2/latest/debian_arm/amazon-ssm-agent.deb -s -o /tmp/amazon-ssm-agent.deb
		if [ $? -ne 0 ]; then
			echo "Unable to retrieve the amazon-ssm-agent from AWS. Please check your internet connection. (Error code: 0x07)"
			exit 1
		fi

		# Install AWS CLI from GitHub
		$PKG_MGR install git python3-pip $QUIET_MODE
		if [ $? -ne 0 ]; then
			echo "An error occurred while trying to install git and python3-pip. Please try running the script again and contact support if it doesn't work. (Error code: 0x08)"
			exit 1
		fi
		git clone https://github.com/aws/aws-cli.git
		cd aws-cli && git checkout v2
		pipx install -r requirements.txt
		pipx install https://github.com/boto/botocore/zipball/v2#egg=botocore --upgrade
		pipx install cmake
		pipx install .
		if [ $? -ne 0 ]; then
			echo "An error occurred while trying to install the AWS CLI. Please reach out to support if you encounter this error message. (Error code: 0x09)"
			exit 1
		fi
	fi

	# Finally install amazon-ssm-agent.
	dpkg -i /tmp/amazon-ssm-agent.deb
	rm -rf /tmp/amazon-ssm-agent.deb
else
	# Remove amazon-ssm-agent if it's using AWS EC2
	if [ "$OS" = "ubuntu" ] && [ "$CLOUD" = true ]; then
		snap remove amazon-ssm-agent
	else
		if [ "$CLOUD" = true ]; then $PKG_MGR remove amazon-ssm-agent $QUIET_MODE; fi
	fi

	# All other Linux distributions.
	if [ "$OS" = "ubuntu" ] || [ "$OS" = "kali" ]; then
		if [[ $(arch) = *"aarch64"* ]]; then
			curl https://s3.us-east-2.amazonaws.com/amazon-ssm-us-east-2/latest/debian_arm64/amazon-ssm-agent.deb -s -o /tmp/amazon-ssm-agent.deb
		else
			curl https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb -s -o /tmp/amazon-ssm-agent.deb
		fi
		dpkg -i /tmp/amazon-ssm-agent.deb
		rm -rf /tmp/amazon-ssm-agent.deb
	elif [ "$OS" = "amazon-linux-2" ] || [ "$OS" == "rhel" ]; then
		yum install $QUIET_MODE https://s3.us-east-2.amazonaws.com/amazon-ssm-us-east-2/latest/linux_amd64/amazon-ssm-agent.rpm
	fi

	# Install AWS
	if [[ $(arch) = *"aarch64"* ]]; then
		if [ "$OS" = "ubuntu" ] && [ "$VERSION" = "24.04" ]; then
			# Special case for Ubuntu 24.04 LTS on ARM
			if ! command -v aws &>/dev/null; then
				# Check if curl is installed, and install it if not
				if ! command -v curl &>/dev/null; then
					$PKG_MGR install curl $QUIET_MODE
				fi
				# AWS CLI is not installed, install it
				curl -sO 'https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip'
				unzip -qqo awscli-exe-linux-aarch64.zip
				./aws/install
				rm -rf awscli-exe-linux-aarch64.zip
			fi
		else
			install_aws_cli_for_arch
		fi
	else
		curl -sO 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip'
		unzip -qqo awscli-exe-linux-x86_64.zip
		./aws/install --update
		rm -rf awscli-exe-linux-x86_64.zip
	fi

	if [ $? -ne 0 ]; then
		echo "An error occurred while trying to install the AWS CLI. Please reach out to support if you encounter this error message. (Error code: 0x0A)"
		exit 1
	fi

	if [ "$OS" = 'rhel' ]; then
		ln -s /usr/local/bin/aws /usr/bin/aws
	fi
fi

# Confirm that the amazon-ssm-agent was installed properly by running amazon-ssm-agent -h and observing the error code.
amazon-ssm-agent -h >/dev/null
if [ $? -ne 0 ]; then
	echo "An error occurred while trying to install the amazon-ssm-agent. Please reach out to support if you encounter this error message. (Error code: 0x0B)"
	exit 1
fi

# Remove aws folder
rm -rf aws

# Modify SSH settings
mkdir -p /root/.ssh
touch /root/.ssh/authorized_keys
sed -i"" 's/#Port 22/Port 22/g' /etc/ssh/sshd_config
sed -i"" 's/#PermitRootLogin prohibit-password/PermitRootLogin prohibit-password/g' /etc/ssh/sshd_config
sed -i"" 's/#MaxSessions 10/MaxSessions 50\nMaxStartups 20/g' /etc/ssh/sshd_config

# Make a backup of sshd_config for future comparisons/troubleshooting.
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak

# Restart the SSH services
if [ "$PKG_MGR" = "yum" ]; then
	service sshd restart
else
	service ssh restart
fi

# Install gems required for ruby agemt
gem install colorize fileutils securerandom

# Install docker
if [ "$OS" = "kali" ]; then
	curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
	if [ $? -ne 0 ]; then
		echo "An error occurred while trying to add the Docker GPG key. Please check your internet connection or contact support. (Error code: 0x0C)"
		exit 1
	fi
	apt update
	if [ $? -ne 0 ]; then
		echo "An error occurred while attempting to update your repositories. Please check your internet connection or contact support. (Error code: 0x0D)"
		exit 1
	fi
	apt install docker.io $QUIET_MODE
	if [ $? -ne 0 ]; then
		echo "An error occurred while trying to install docker (kali). Please check your internet connection or contact support. (Error code: 0x0E)"
		exit 1
	fi
else
	if [ "$OS" = "ubuntu" ] || [ "$OS" = "rasp" ]; then
		curl -sSL https://get.docker.com | sh
		if [ $? -ne 0 ]; then apt install docker.io -y; fi # for whatever annoying reason, Ubuntu doesn't always consistently download docker from the above command
		if [ $? -ne 0 ]; then
			echo "An error occurred while trying to install docker (ubuntu). Please check your internet connection or contact support. (Error code: 0x0F)"
			exit 1
		fi
	elif [ "$OS" = 'rhel' ]; then
		if cat /etc/os-release | grep -i "server 7"; then
			rpm -i http://mirror.centos.org/centos/7/extras/x86_64/Packages/slirp4netns-0.4.3-4.el7_8.x86_64.rpm
			rpm -i http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.119.2-1.911c772.el7_8.noarch.rpm
			rpm -i http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.119.2-1.911c772.el7_8.noarch.rpm
			rpm -i http://mirror.centos.org/centos/7/extras/x86_64/Packages/fuse3-libs-3.6.1-4.el7.x86_64.rpm
			rpm -i http://mirror.centos.org/centos/7/extras/x86_64/Packages/fuse-overlayfs-0.7.2-6.el7_8.x86_64.rpm
		fi
		yum module remove container-tools
		yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
		yum install docker-ce -y
	else
		yum install docker -y
	fi
fi

# Ensure that docker is started automatically on Amazon Linux 2.
if [ "$OS" = "amazon-linux-2" ]; then
	systemctl enable docker.service
fi

# Install the docker compose plugin if it's not already installed
# Reference: https://docs.docker.com/compose/install/linux/#install-the-plugin-manually
if ! docker compose >/dev/null 2>&1; then
	DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
	mkdir -p $DOCKER_CONFIG/cli-plugins

	# Add support for Raspberry Pi (aarch64)
	if [[ $(arch) = *"aarch64"* ]]; then
		curl -SkL https://github.com/docker/compose/releases/download/v2.24.0-birthday.10/docker-compose-linux-aarch64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
	else
		curl -SkL https://github.com/docker/compose/releases/download/v2.24.0-birthday.10/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
	fi
	chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
fi

# Clear crontab
crontab -r

# Add to crontab
(
	crontab -l 2>/dev/null
	echo "*/15 * * * * /root/./vpentest.rb connect"
) | crontab -
(
	crontab -l 2>/dev/null
	echo "*/10 * * * * /root/vpentest_updater.rb --manual"
) | crontab -
(
	crontab -l 2>/dev/null
	echo "@reboot /usr/sbin/netplan apply"
) | crontab -

# Bashrc aliases
if ! grep -q -i "alias vpt='~/./vpentest.rb'" ~/.bashrc; then
	echo "alias vpt='~/./vpentest.rb'" >>~/.bashrc
fi
if ! grep -q -i "alias vptu='~/./vpentest_updater.rb --manual'" ~/.bashrc; then
	echo "alias vptu='~/./vpentest_updater.rb --manual'" >>~/.bashrc
fi
if ! grep -Fxq 'if [ -z "$SSH_CONNECTION" ] && [ -z "$TMUX" ]; then ~/./vpentest.rb; fi' ~/.bashrc; then
	echo 'if [ -z "$SSH_CONNECTION" ] && [ -z "$TMUX" ]; then ~/./vpentest.rb; fi' >>~/.bashrc
fi

# Set the date with ntpdate
if [ "$OS" = 'rhel' ]; then
	sed -i"" 's/^server/#server/g' /etc/chrony.conf
	if ! cat /etc/chrony.conf | grep -i "pool pool.ntp.org"; then
		echo "pool pool.ntp.org iburst" >>/etc/chrony.conf
	fi
else
	/usr/sbin/ntpdate pool.ntp.org
fi

if [ $? -ne 0 ]; then
	echo "An error occurred while trying to set the date via ntp. Please ensure that NTP is permitted on the firewall. (Error code: 0x10)"
	exit 1
fi

auto_uuid=""

# Attempt to register the VM in the CLI (before starting the menu)
display_finished_summary=true

# If auto_uuid variable contains the UUID, attempt to auto-register.
if [ ! -z "$auto_uuid" ]; then
	# Insert the UUID into the text file and call the vPenTest script.
	echo " [*] Attempting to auto-register your VM. Please wait..."
	echo "$auto_uuid" >$HOME/.vpentest_agent_uuid.txt
	/root/./vpentest.rb first-connect
	display_finished_summary=false
else
	read -p " [*] Looks like your installation script succeeded! Do you wish to register this VM? [N/y] " attempt_to_register </dev/tty
	if [ "$attempt_to_register" == "y" ]; then
		read -p " [*] Please confirm that you have a UUID: [n/Y] " vm_in_portal </dev/tty

		if [ "$vm_in_portal" == "y" ] || [ -z "$vm_in_portal" ]; then
			read -p " [*] Please provide the UUID: " uuid </dev/tty

			if [ -z "$uuid" ]; then
				echo " [*] You've provided an empty string. Canceling registration request."
			else
				# Write this value to file before registering.
				display_finished_summary=false
				echo "$uuid" >$HOME/.vpentest_agent_uuid.txt
				/root/./vpentest.rb first-connect
			fi
		else
			echo " [*] Error! Before registering this VM, you will need a UUID which will either be provided by your consultant or from within the portal. (Error code: 0x11))"
		fi
	fi
fi

# Finished
if $display_finished_summary; then
	echo -e " [*] Prerequisites installed!\n"
	echo -e " ****************** GETTING STARTED ******************\n"
	echo " [*] Type the following command on your command line: source ~/.bashrc"
	echo " [*] Afterwards, you'll be able to type the following command to open the agent's menu: vpt"
	echo " [*] NOTE: To register this agent, bring up the menu using the information above and then select option 2 from the menu."
	echo -e " [*] Generate the code for this agent using the vPenTest portal.\n"
	echo -e " ****************** NEED ASSISTANCE? ******************\n"
	echo " [*] If you are unsure about the instructions above, just type \"reboot\" (without quotes) and hit enter."
	echo -e " [*] Afterwards, login and the menu should automatically come up.\n"
	echo -e " [*] For any issues, please email support@vpentest.io or visit the Help Center.\n"
fi
